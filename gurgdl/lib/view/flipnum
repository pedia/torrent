import 'package:flutter/widgets.dart';
import 'package:collection/collection.dart';

class FlipNumber extends StatefulWidget {
  const FlipNumber(
    this.number, {
    this.duration,
    this.textStyle,
    super.key,
  });

  final ValueNotifier<num> number;
  final TextStyle? textStyle;
  final Duration? duration;

  @override
  State<FlipNumber> createState() => _FlipNumberState();
}

class _FlipNumberState extends State<FlipNumber> {
  @override
  void initState() {
    super.initState();
    widget.number.addListener(() => setState(() {}));
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cs = widget.number.value.toString().split('');
    final ws = <Widget>[];

    //         1     1     2     3
    //         1     2     4     9
    // step    0     1    12   126
    // cycle   0     1   1.2  12.6
    //         0  1000   833    79

    cs.forEachIndexed((i, c) {
      var d = widget.duration! - Duration(milliseconds: 10 * (cs.length - i));

      ws.add(SingleChar(
        c,
        textStyle: widget.textStyle,
        duration: d,
      ));
    });

    return SizedBox(height: 50, child: Row(children: ws));
  }
}

class SingleChar extends StatefulWidget {
  const SingleChar(this.c, {this.textStyle, this.duration, super.key});

  final String c;
  final TextStyle? textStyle;
  final Duration? duration;

  @override
  State<SingleChar> createState() => _SingleCharState();
}

class _SingleCharState extends State<SingleChar>
    with SingleTickerProviderStateMixin {
  ///
  late final _controller = AnimationController(
    duration: widget.duration,
    vsync: this,
  )..repeat(reverse: true);

  // Tween<T> -> Animatable
  // Animation<T> Animatable.animate()

  late final Animation<Offset> _offsetAnimation =
      Tween<Offset>(begin: Offset.zero, end: const Offset(0, 1)).animate(
    CurvedAnimation(parent: _controller, curve: Curves.elasticOut),
  );

  @override
  void initState() {
    super.initState();
    // _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  void didUpdateWidget(SingleChar oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.c != oldWidget.c) {
      _controller.repeat();
      // _controller.forward();
    }
  }

  @override
  Widget build(BuildContext context) {
    return SlideTransition(
      position: _offsetAnimation,
      child: Padding(
        padding: const EdgeInsets.all(8),
        child: Text(
          widget.c,
          style: widget.textStyle,
        ),
      ),
    );
  }
}
